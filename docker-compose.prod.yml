version: "3.9"

# db(MySQL),app(Django),web(Nginx)のコンテナを作成
services:
  mysql:
    # コンテナ名をmysqlに設定
    container_name: mysql
    # MySQLのDockerfileをビルドする
    # build:
    build: .Docker/MySQL
      # ビルドコンテキストはカレントディレクトリ
      # context: .
      # dockerfile: Docker/MySQL/Dockerfile
    platform: linux/x86_64
    volumes:
      - mysql_data:/var/lib/mysql
    env_file:
      - .env
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD

  django:
    # コンテナ名をappに設定
    container_name: django
    # DjangoのDockerfileをビルドする
    build: ./Docker/Django
    # build: 
      # ビルドコンテキストはカレントディレクトリ
      # context: .
      # dockerfile: Docker/Django/Dockerfile
    volumes:
      - ./Django_App:/code
      - ./static:/static
    # 8000番ポートをNginx側が接続できるよう開く
    expose:
      - "8000"
    # uWSGIを起動させる
    command:  bash -c "python manage.py collectstatic --noinput && \
              uwsgi --socket :8000 --module app.wsgi --py-autoreload 1 --logto /tmp/mylog.log"
    env_file:
      - .env
    depends_on:
      mysql:
        # dbのヘルスチェックが終わってからappを起動させる
        condition: service_healthy

  nginx:
    # コンテナ名をwebに指定
    container_name: nginx
    # NginxのDockerfileをビルドする
    # build:
    build: ./Docker/Nginx
      # ビルドコンテキストはカレントディレクトリ
      # context: .
      # dockerfile: Docker/Nginx/Dockerfile
    # ボリュームを指定
    # ローカルの/staticをコンテナの/staticにマウントする
    volumes:
      - ./static:/static
    # ローカルの80番ボートをコンテナの80番ポートとつなぐ
    ports:
      - "80:80"
    # 先にappを起動してからwebを起動する
    depends_on:
      - django
      
volumes:
  mysql_data:
  static: